<?php

namespace Componentizer;

class Components {

  private $post_id;
  private $suffixes = [];
  private $components = [];

  private $settings;
  private $componentizer_fields;
  private $location_orders;


  function __construct()
  {
    $this->component_fields = get_option( 'componentizer_fields' );
    $this->settings = get_option('componentizer_advanced_settings');
    $this->location_orders = get_option('componentizer_location_orders');
    if ($this->location_orders === '') $this->location_orders = [];
  }


  /**
   * Build page using appropriate components.
   * @param  array $components  Optional. An array of components to load in order.
   * @param  mixed $suffixes    Optional. A string or array or suffixes which should override the template priority
   */
  public function build()
  {
    // Locate the approriate component files and load them
    $components = $this->get_components();
    if ($components) foreach ($components as $component) {
      $file = locate_template($this->settings['component_path'].'/'.$component.'.php',false,false);
      if ($file) {
        include($file);
      }
    }
  }

  /**
   * Return the output generated by the build method as a string
   * @return string Output generated by the build method
   */
  public function get_build()
  {
    ob_start();
    $this->build();
    $contents = ob_get_clean();
    return $contents;
  }


  // /**
  //  * Build a component by passing content to it
  //  * @param  mixed $component_content Required. A string or array of content to be used by the component.
  //  * @param  string $component        Required. The base component to build with.
  //  * @param  mixed $suffixes          Optional. A string or array or suffixes which should override the template priority
  //  */
  // public function build_with($context, $component, $suffixes = null) {
  //   $templates = [];
  //   array_unshift($templates, $this->settings['component_path'].'/'.$component.'.php');
  //   if ($suffixes) foreach ($suffixes as $suffix) {
  //     array_unshift($templates, $this->settings['component_path'].'/'.$component.'-'.$suffix.'.php');
  //   }
  //   $file = locate_template($templates,false,false);
  //   if ($file) include($file);
  // }


  /**
   * Get an ordered list of base components for the post.
   * @return array Components
   */
  public function get_components()
  {
    if ($this->components) {
      return $this->components;
    } else {
      $post_id = $this->get_post_id();
      $visible_on_archive = get_option('componentizer_visible_on_archive');
      $components = [];
      $component_ids = get_post_meta( $post_id, '_field_order', true );

      $field_groups = new FieldGroups();
      if (!$component_ids) {
        $component_ids = $field_groups->get_for_post($post_id);
      }
      
      // Set the base components to load as determined by the $component_ids
      $top_components = $field_groups->sort_by_location('top',$component_ids);
      $bottom_components = $field_groups->sort_by_location('bottom',$component_ids);
      $sortable_components = array_diff($component_ids,$top_components,$bottom_components);
      
      $ordered_component_ids = array_merge($top_components,$sortable_components,$bottom_components);
      foreach ($ordered_component_ids as $component_id) {
        if (array_key_exists($component_id,$this->component_fields)) {
          if (is_singular() || in_array($component_id,$visible_on_archive)) {
            array_push($components, $this->component_fields[$component_id]['template']);
          }
        }
      }
      return $components;
    }
  }
  /**
   * Manually set the list of components
   * @param array $components Ordered array of base components
   */
  public function set_components(Array $components)
  {
    return $this->components = $components;
  }
  /**
   * Reset the list of components back to it's default state after having used
   * the set_components() method
   */
  public function reset_components()
  {
    $this->components = null;
  }

  /**
   * Get the ID of the current post
   * @return integer ID of the current post
   */
  public function get_post_id()
  {
    if ($this->post_id) {
      return $this->post_id;
    } else {
      return get_the_ID();
    }
  }
  /**
   * Set the ID of the post to use componentizer for
   * @param integer $id ID of the new post
   */
  public function set_post_id($id)
  {
    return $this->post_id = $id;
  }
  /**
   * Reset the ID of the post.
   */
  public function reset_post_id()
  {
    $this->post_id = null;
  }


  /**
   * Sort a list of component IDs according to their appropriate location
   * @param  string $location     Can be 'top' or 'bottom'
   * @param  array $component_ids A list of component IDs
   * @return array                Component IDs matching this location
   */
  private function sort_groups_by_location($location, $component_ids)
  {
    $local_components = [];
    if (!array_key_exists($location, $this->location_orders)) $this->location_orders[$location] = [];

    foreach ($this->location_orders[$location] as $value) {
      $component = array_search($value, $component_ids);
      if ($component !== false) {
        array_push($local_components, $value);
        unset($component_ids[$component]);
      }
      unset($component);
    }

    return $local_components;
  }

}